{
    "loginGetUser" : "select id from user where name = ? and password = password(?)",
    "getUserByToken" : "select user_id, u.entity_type, u.entity_id from user_login ul inner join user u on ul.user_id = u.id where token = ? and date_add(ul.date_created, INTERVAL ? DAY) >= now()",
    "getToken" : "call getToken(?,?)",
    "getTokenById" : "select token from pantax.user_login where id = ?",
    "getUserStatus" : "select status from user_status where user_id = ? and date_add(status_date, interval ? MINUTE) >= now()",
    "updateUserStatus" : "INSERT INTO pantax.user_status (user_id, status, status_date) VALUES( ?, 'live', now()) ON DUPLICATE KEY UPDATE status_date = now()",
    "getDoctorAppOptions" : "select ao.id, from_date, to_date from doctor d inner join appointment_option ao on d.id = ao.doctor_id where d.id = :doctorId and ao.from_date > now() and ao.id not in (select aao.appointment_option_id from appointment_appointment_option aao inner join appointment_option ao on ao.id = aao.appointment_option_id where ao.doctor_id = :doctorId )",
    "searchMainPart" : "select ao.id as app_id, d.id as doctor_id, ao.from_date, ao.to_date, d.name, d.degree from doctor d inner join appointment_option ao on ao.doctor_id = d.id where ao.from_date > now() and ao.to_date < date_add(now(), interval 1 day) and ao.id not in (select appointment_option_id from appointment_appointment_option aao inner join appointment_option ao1 on aao.appointment_option_id = ao1.id and ao1.from_date > now()) and (:dynamic)",
    "searchDynamicPart" : "concat(d.name, '', d.primary_care) like '%:term%'",
    "getDoctor" : "select name, degree, primary_care, rank from doctor where id = ?",
    "getPatient" : "select * from patient where id = ?",
    "getPatientAppointments" : "select ao.doctor_id, ao.from_date, ao.to_date, ap.id appointment_id, ao.id appointment_option_id from appointment ap inner join appointment_appointment_option aao on ap.id = aao.appointment_id inner join appointment_option ao on aao.appointment_option_id = ao.id  where ap.patient_id = ? and ao.from_date > now()",
    "appointmentInfo" : "select weight, height, blood_pressure, temperature, appointment_reason, additional_info from appointment where id = ?"
}
